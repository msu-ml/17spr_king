# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_pysgpp', [dirname(__file__)])
        except ImportError:
            import _pysgpp
            return _pysgpp
        if fp is not None:
            try:
                _mod = imp.load_module('_pysgpp', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _pysgpp = swig_import_helper()
    del swig_import_helper
else:
    import _pysgpp
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


try:
    import weakref
    weakref_proxy = weakref.proxy
except:
    weakref_proxy = lambda x: x


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pysgpp.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self): return _pysgpp.SwigPyIterator_value(self)
    def incr(self, n=1): return _pysgpp.SwigPyIterator_incr(self, n)
    def decr(self, n=1): return _pysgpp.SwigPyIterator_decr(self, n)
    def distance(self, *args): return _pysgpp.SwigPyIterator_distance(self, *args)
    def equal(self, *args): return _pysgpp.SwigPyIterator_equal(self, *args)
    def copy(self): return _pysgpp.SwigPyIterator_copy(self)
    def next(self): return _pysgpp.SwigPyIterator_next(self)
    def __next__(self): return _pysgpp.SwigPyIterator___next__(self)
    def previous(self): return _pysgpp.SwigPyIterator_previous(self)
    def advance(self, *args): return _pysgpp.SwigPyIterator_advance(self, *args)
    def __eq__(self, *args): return _pysgpp.SwigPyIterator___eq__(self, *args)
    def __ne__(self, *args): return _pysgpp.SwigPyIterator___ne__(self, *args)
    def __iadd__(self, *args): return _pysgpp.SwigPyIterator___iadd__(self, *args)
    def __isub__(self, *args): return _pysgpp.SwigPyIterator___isub__(self, *args)
    def __add__(self, *args): return _pysgpp.SwigPyIterator___add__(self, *args)
    def __sub__(self, *args): return _pysgpp.SwigPyIterator___sub__(self, *args)
    def __iter__(self): return self
SwigPyIterator_swigregister = _pysgpp.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class unsignedIntArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, unsignedIntArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, unsignedIntArray, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pysgpp.new_unsignedIntArray(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pysgpp.delete_unsignedIntArray
    __del__ = lambda self : None;
    def __getitem__(self, *args): return _pysgpp.unsignedIntArray___getitem__(self, *args)
    def __setitem__(self, *args): return _pysgpp.unsignedIntArray___setitem__(self, *args)
    def cast(self): return _pysgpp.unsignedIntArray_cast(self)
    __swig_getmethods__["frompointer"] = lambda x: _pysgpp.unsignedIntArray_frompointer
    if _newclass:frompointer = staticmethod(_pysgpp.unsignedIntArray_frompointer)
unsignedIntArray_swigregister = _pysgpp.unsignedIntArray_swigregister
unsignedIntArray_swigregister(unsignedIntArray)

def unsignedIntArray_frompointer(*args):
  return _pysgpp.unsignedIntArray_frompointer(*args)
unsignedIntArray_frompointer = _pysgpp.unsignedIntArray_frompointer

class DoubleVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DoubleVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DoubleVector, name)
    __repr__ = _swig_repr
    def iterator(self): return _pysgpp.DoubleVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _pysgpp.DoubleVector___nonzero__(self)
    def __bool__(self): return _pysgpp.DoubleVector___bool__(self)
    def __len__(self): return _pysgpp.DoubleVector___len__(self)
    def pop(self): return _pysgpp.DoubleVector_pop(self)
    def __getslice__(self, *args): return _pysgpp.DoubleVector___getslice__(self, *args)
    def __setslice__(self, *args): return _pysgpp.DoubleVector___setslice__(self, *args)
    def __delslice__(self, *args): return _pysgpp.DoubleVector___delslice__(self, *args)
    def __delitem__(self, *args): return _pysgpp.DoubleVector___delitem__(self, *args)
    def __getitem__(self, *args): return _pysgpp.DoubleVector___getitem__(self, *args)
    def __setitem__(self, *args): return _pysgpp.DoubleVector___setitem__(self, *args)
    def append(self, *args): return _pysgpp.DoubleVector_append(self, *args)
    def empty(self): return _pysgpp.DoubleVector_empty(self)
    def size(self): return _pysgpp.DoubleVector_size(self)
    def clear(self): return _pysgpp.DoubleVector_clear(self)
    def swap(self, *args): return _pysgpp.DoubleVector_swap(self, *args)
    def get_allocator(self): return _pysgpp.DoubleVector_get_allocator(self)
    def begin(self): return _pysgpp.DoubleVector_begin(self)
    def end(self): return _pysgpp.DoubleVector_end(self)
    def rbegin(self): return _pysgpp.DoubleVector_rbegin(self)
    def rend(self): return _pysgpp.DoubleVector_rend(self)
    def pop_back(self): return _pysgpp.DoubleVector_pop_back(self)
    def erase(self, *args): return _pysgpp.DoubleVector_erase(self, *args)
    def __init__(self, *args): 
        this = _pysgpp.new_DoubleVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _pysgpp.DoubleVector_push_back(self, *args)
    def front(self): return _pysgpp.DoubleVector_front(self)
    def back(self): return _pysgpp.DoubleVector_back(self)
    def assign(self, *args): return _pysgpp.DoubleVector_assign(self, *args)
    def resize(self, *args): return _pysgpp.DoubleVector_resize(self, *args)
    def insert(self, *args): return _pysgpp.DoubleVector_insert(self, *args)
    def reserve(self, *args): return _pysgpp.DoubleVector_reserve(self, *args)
    def capacity(self): return _pysgpp.DoubleVector_capacity(self)
    __swig_destroy__ = _pysgpp.delete_DoubleVector
    __del__ = lambda self : None;
DoubleVector_swigregister = _pysgpp.DoubleVector_swigregister
DoubleVector_swigregister(DoubleVector)

class IndexValPair(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IndexValPair, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IndexValPair, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pysgpp.new_IndexValPair(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["first"] = _pysgpp.IndexValPair_first_set
    __swig_getmethods__["first"] = _pysgpp.IndexValPair_first_get
    if _newclass:first = _swig_property(_pysgpp.IndexValPair_first_get, _pysgpp.IndexValPair_first_set)
    __swig_setmethods__["second"] = _pysgpp.IndexValPair_second_set
    __swig_getmethods__["second"] = _pysgpp.IndexValPair_second_get
    if _newclass:second = _swig_property(_pysgpp.IndexValPair_second_get, _pysgpp.IndexValPair_second_set)
    def __len__(self): return 2
    def __repr__(self): return str((self.first, self.second))
    def __getitem__(self, index): 
      if not (index % 2): 
        return self.first
      else:
        return self.second
    def __setitem__(self, index, val):
      if not (index % 2): 
        self.first = val
      else:
        self.second = val
    __swig_destroy__ = _pysgpp.delete_IndexValPair
    __del__ = lambda self : None;
IndexValPair_swigregister = _pysgpp.IndexValPair_swigregister
IndexValPair_swigregister(IndexValPair)

class IndexValVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IndexValVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IndexValVector, name)
    __repr__ = _swig_repr
    def iterator(self): return _pysgpp.IndexValVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _pysgpp.IndexValVector___nonzero__(self)
    def __bool__(self): return _pysgpp.IndexValVector___bool__(self)
    def __len__(self): return _pysgpp.IndexValVector___len__(self)
    def pop(self): return _pysgpp.IndexValVector_pop(self)
    def __getslice__(self, *args): return _pysgpp.IndexValVector___getslice__(self, *args)
    def __setslice__(self, *args): return _pysgpp.IndexValVector___setslice__(self, *args)
    def __delslice__(self, *args): return _pysgpp.IndexValVector___delslice__(self, *args)
    def __delitem__(self, *args): return _pysgpp.IndexValVector___delitem__(self, *args)
    def __getitem__(self, *args): return _pysgpp.IndexValVector___getitem__(self, *args)
    def __setitem__(self, *args): return _pysgpp.IndexValVector___setitem__(self, *args)
    def append(self, *args): return _pysgpp.IndexValVector_append(self, *args)
    def empty(self): return _pysgpp.IndexValVector_empty(self)
    def size(self): return _pysgpp.IndexValVector_size(self)
    def clear(self): return _pysgpp.IndexValVector_clear(self)
    def swap(self, *args): return _pysgpp.IndexValVector_swap(self, *args)
    def get_allocator(self): return _pysgpp.IndexValVector_get_allocator(self)
    def begin(self): return _pysgpp.IndexValVector_begin(self)
    def end(self): return _pysgpp.IndexValVector_end(self)
    def rbegin(self): return _pysgpp.IndexValVector_rbegin(self)
    def rend(self): return _pysgpp.IndexValVector_rend(self)
    def pop_back(self): return _pysgpp.IndexValVector_pop_back(self)
    def erase(self, *args): return _pysgpp.IndexValVector_erase(self, *args)
    def __init__(self, *args): 
        this = _pysgpp.new_IndexValVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _pysgpp.IndexValVector_push_back(self, *args)
    def front(self): return _pysgpp.IndexValVector_front(self)
    def back(self): return _pysgpp.IndexValVector_back(self)
    def assign(self, *args): return _pysgpp.IndexValVector_assign(self, *args)
    def resize(self, *args): return _pysgpp.IndexValVector_resize(self, *args)
    def insert(self, *args): return _pysgpp.IndexValVector_insert(self, *args)
    def reserve(self, *args): return _pysgpp.IndexValVector_reserve(self, *args)
    def capacity(self): return _pysgpp.IndexValVector_capacity(self)
    __swig_destroy__ = _pysgpp.delete_IndexValVector
    __del__ = lambda self : None;
IndexValVector_swigregister = _pysgpp.IndexValVector_swigregister
IndexValVector_swigregister(IndexValVector)

SERIALIZATION_VERSION = _pysgpp.SERIALIZATION_VERSION
class DimensionBoundary(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DimensionBoundary, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DimensionBoundary, name)
    __repr__ = _swig_repr
    __swig_setmethods__["leftBoundary"] = _pysgpp.DimensionBoundary_leftBoundary_set
    __swig_getmethods__["leftBoundary"] = _pysgpp.DimensionBoundary_leftBoundary_get
    if _newclass:leftBoundary = _swig_property(_pysgpp.DimensionBoundary_leftBoundary_get, _pysgpp.DimensionBoundary_leftBoundary_set)
    __swig_setmethods__["rightBoundary"] = _pysgpp.DimensionBoundary_rightBoundary_set
    __swig_getmethods__["rightBoundary"] = _pysgpp.DimensionBoundary_rightBoundary_get
    if _newclass:rightBoundary = _swig_property(_pysgpp.DimensionBoundary_rightBoundary_get, _pysgpp.DimensionBoundary_rightBoundary_set)
    __swig_setmethods__["bDirichletLeft"] = _pysgpp.DimensionBoundary_bDirichletLeft_set
    __swig_getmethods__["bDirichletLeft"] = _pysgpp.DimensionBoundary_bDirichletLeft_get
    if _newclass:bDirichletLeft = _swig_property(_pysgpp.DimensionBoundary_bDirichletLeft_get, _pysgpp.DimensionBoundary_bDirichletLeft_set)
    __swig_setmethods__["bDirichletRight"] = _pysgpp.DimensionBoundary_bDirichletRight_set
    __swig_getmethods__["bDirichletRight"] = _pysgpp.DimensionBoundary_bDirichletRight_get
    if _newclass:bDirichletRight = _swig_property(_pysgpp.DimensionBoundary_bDirichletRight_get, _pysgpp.DimensionBoundary_bDirichletRight_set)
    def __init__(self): 
        this = _pysgpp.new_DimensionBoundary()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pysgpp.delete_DimensionBoundary
    __del__ = lambda self : None;
DimensionBoundary_swigregister = _pysgpp.DimensionBoundary_swigregister
DimensionBoundary_swigregister(DimensionBoundary)

class BoundingBox(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BoundingBox, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BoundingBox, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pysgpp.new_BoundingBox(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pysgpp.delete_BoundingBox
    __del__ = lambda self : None;
    def setBoundary(self, *args): return _pysgpp.BoundingBox_setBoundary(self, *args)
    def getBoundary(self, *args): return _pysgpp.BoundingBox_getBoundary(self, *args)
    def getDimensions(self): return _pysgpp.BoundingBox_getDimensions(self)
    def getIntervalWidth(self, *args): return _pysgpp.BoundingBox_getIntervalWidth(self, *args)
    def getIntervalOffset(self, *args): return _pysgpp.BoundingBox_getIntervalOffset(self, *args)
    def isTrivialCube(self): return _pysgpp.BoundingBox_isTrivialCube(self)
    def hasDirichletBoundaryLeft(self, *args): return _pysgpp.BoundingBox_hasDirichletBoundaryLeft(self, *args)
    def hasDirichletBoundaryRight(self, *args): return _pysgpp.BoundingBox_hasDirichletBoundaryRight(self, *args)
BoundingBox_swigregister = _pysgpp.BoundingBox_swigregister
BoundingBox_swigregister(BoundingBox)

class RefinementFunctor(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RefinementFunctor, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RefinementFunctor, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def __call__(self, *args): return _pysgpp.RefinementFunctor___call__(self, *args)
    def start(self): return _pysgpp.RefinementFunctor_start(self)
    __swig_destroy__ = _pysgpp.delete_RefinementFunctor
    __del__ = lambda self : None;
RefinementFunctor_swigregister = _pysgpp.RefinementFunctor_swigregister
RefinementFunctor_swigregister(RefinementFunctor)

class GridGenerator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GridGenerator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GridGenerator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def regular(self, *args): return _pysgpp.GridGenerator_regular(self, *args)
    def refine(self, *args): return _pysgpp.GridGenerator_refine(self, *args)
    def getNumberOfRefinablePoints(self): return _pysgpp.GridGenerator_getNumberOfRefinablePoints(self)
    __swig_destroy__ = _pysgpp.delete_GridGenerator
    __del__ = lambda self : None;
GridGenerator_swigregister = _pysgpp.GridGenerator_swigregister
GridGenerator_swigregister(GridGenerator)

class OperationB(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OperationB, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OperationB, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def mult(self, *args): return _pysgpp.OperationB_mult(self, *args)
    def multTranspose(self, *args): return _pysgpp.OperationB_multTranspose(self, *args)
    __swig_destroy__ = _pysgpp.delete_OperationB
    __del__ = lambda self : None;
OperationB_swigregister = _pysgpp.OperationB_swigregister
OperationB_swigregister(OperationB)

class OperationMatrix(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OperationMatrix, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OperationMatrix, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def mult(self, *args): return _pysgpp.OperationMatrix_mult(self, *args)
    __swig_destroy__ = _pysgpp.delete_OperationMatrix
    __del__ = lambda self : None;
OperationMatrix_swigregister = _pysgpp.OperationMatrix_swigregister
OperationMatrix_swigregister(OperationMatrix)

class OperationEval(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OperationEval, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OperationEval, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def eval(self, *args): return _pysgpp.OperationEval_eval(self, *args)
    __swig_destroy__ = _pysgpp.delete_OperationEval
    __del__ = lambda self : None;
OperationEval_swigregister = _pysgpp.OperationEval_swigregister
OperationEval_swigregister(OperationEval)

class OperationTest(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OperationTest, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OperationTest, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def test(self, *args): return _pysgpp.OperationTest_test(self, *args)
    def testWithCharacteristicNumber(self, *args): return _pysgpp.OperationTest_testWithCharacteristicNumber(self, *args)
    __swig_destroy__ = _pysgpp.delete_OperationTest
    __del__ = lambda self : None;
OperationTest_swigregister = _pysgpp.OperationTest_swigregister
OperationTest_swigregister(OperationTest)

class OperationHierarchisation(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OperationHierarchisation, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OperationHierarchisation, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def doHierarchisation(self, *args): return _pysgpp.OperationHierarchisation_doHierarchisation(self, *args)
    def doDehierarchisation(self, *args): return _pysgpp.OperationHierarchisation_doDehierarchisation(self, *args)
    __swig_destroy__ = _pysgpp.delete_OperationHierarchisation
    __del__ = lambda self : None;
OperationHierarchisation_swigregister = _pysgpp.OperationHierarchisation_swigregister
OperationHierarchisation_swigregister(OperationHierarchisation)

class HashGenerator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, HashGenerator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, HashGenerator, name)
    __repr__ = _swig_repr
    def regular(self, *args): return _pysgpp.HashGenerator_regular(self, *args)
    def regularWithBoundaries(self, *args): return _pysgpp.HashGenerator_regularWithBoundaries(self, *args)
    def __init__(self): 
        this = _pysgpp.new_HashGenerator()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pysgpp.delete_HashGenerator
    __del__ = lambda self : None;
HashGenerator_swigregister = _pysgpp.HashGenerator_swigregister
HashGenerator_swigregister(HashGenerator)

class HashRefinement(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, HashRefinement, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, HashRefinement, name)
    __repr__ = _swig_repr
    def free_refine(self, *args): return _pysgpp.HashRefinement_free_refine(self, *args)
    def getNumberOfRefinablePoints(self, *args): return _pysgpp.HashRefinement_getNumberOfRefinablePoints(self, *args)
    def __init__(self): 
        this = _pysgpp.new_HashRefinement()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pysgpp.delete_HashRefinement
    __del__ = lambda self : None;
HashRefinement_swigregister = _pysgpp.HashRefinement_swigregister
HashRefinement_swigregister(HashRefinement)

class HashRefinementBoundaries(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, HashRefinementBoundaries, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, HashRefinementBoundaries, name)
    __repr__ = _swig_repr
    def free_refine(self, *args): return _pysgpp.HashRefinementBoundaries_free_refine(self, *args)
    def getNumberOfRefinablePoints(self, *args): return _pysgpp.HashRefinementBoundaries_getNumberOfRefinablePoints(self, *args)
    def __init__(self): 
        this = _pysgpp.new_HashRefinementBoundaries()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pysgpp.delete_HashRefinementBoundaries
    __del__ = lambda self : None;
HashRefinementBoundaries_swigregister = _pysgpp.HashRefinementBoundaries_swigregister
HashRefinementBoundaries_swigregister(HashRefinementBoundaries)

class StandardGridGenerator(GridGenerator):
    __swig_setmethods__ = {}
    for _s in [GridGenerator]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StandardGridGenerator, name, value)
    __swig_getmethods__ = {}
    for _s in [GridGenerator]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, StandardGridGenerator, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pysgpp.new_StandardGridGenerator(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pysgpp.delete_StandardGridGenerator
    __del__ = lambda self : None;
    def regular(self, *args): return _pysgpp.StandardGridGenerator_regular(self, *args)
    def refine(self, *args): return _pysgpp.StandardGridGenerator_refine(self, *args)
    def getNumberOfRefinablePoints(self): return _pysgpp.StandardGridGenerator_getNumberOfRefinablePoints(self)
StandardGridGenerator_swigregister = _pysgpp.StandardGridGenerator_swigregister
StandardGridGenerator_swigregister(StandardGridGenerator)

class BoundaryGridGenerator(GridGenerator):
    __swig_setmethods__ = {}
    for _s in [GridGenerator]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BoundaryGridGenerator, name, value)
    __swig_getmethods__ = {}
    for _s in [GridGenerator]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, BoundaryGridGenerator, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pysgpp.new_BoundaryGridGenerator(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pysgpp.delete_BoundaryGridGenerator
    __del__ = lambda self : None;
    def regular(self, *args): return _pysgpp.BoundaryGridGenerator_regular(self, *args)
    def refine(self, *args): return _pysgpp.BoundaryGridGenerator_refine(self, *args)
    def getNumberOfRefinablePoints(self): return _pysgpp.BoundaryGridGenerator_getNumberOfRefinablePoints(self)
BoundaryGridGenerator_swigregister = _pysgpp.BoundaryGridGenerator_swigregister
BoundaryGridGenerator_swigregister(BoundaryGridGenerator)

class SurplusRefinementFunctor(RefinementFunctor):
    __swig_setmethods__ = {}
    for _s in [RefinementFunctor]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SurplusRefinementFunctor, name, value)
    __swig_getmethods__ = {}
    for _s in [RefinementFunctor]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SurplusRefinementFunctor, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        if self.__class__ == SurplusRefinementFunctor:
            _self = None
        else:
            _self = self
        this = _pysgpp.new_SurplusRefinementFunctor(_self, *args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pysgpp.delete_SurplusRefinementFunctor
    __del__ = lambda self : None;
    def __call__(self, *args): return _pysgpp.SurplusRefinementFunctor___call__(self, *args)
    def start(self): return _pysgpp.SurplusRefinementFunctor_start(self)
    def getRefinementsNum(self): return _pysgpp.SurplusRefinementFunctor_getRefinementsNum(self)
    def getRefinementThreshold(self): return _pysgpp.SurplusRefinementFunctor_getRefinementThreshold(self)
    def __disown__(self):
        self.this.disown()
        _pysgpp.disown_SurplusRefinementFunctor(self)
        return weakref_proxy(self)
SurplusRefinementFunctor_swigregister = _pysgpp.SurplusRefinementFunctor_swigregister
SurplusRefinementFunctor_swigregister(SurplusRefinementFunctor)

class Grid(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Grid, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Grid, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_getmethods__["createLinearGrid"] = lambda x: _pysgpp.Grid_createLinearGrid
    if _newclass:createLinearGrid = staticmethod(_pysgpp.Grid_createLinearGrid)
    __swig_getmethods__["createLinearBoundaryGrid"] = lambda x: _pysgpp.Grid_createLinearBoundaryGrid
    if _newclass:createLinearBoundaryGrid = staticmethod(_pysgpp.Grid_createLinearBoundaryGrid)
    __swig_getmethods__["createLinearTrapezoidBoundaryGrid"] = lambda x: _pysgpp.Grid_createLinearTrapezoidBoundaryGrid
    if _newclass:createLinearTrapezoidBoundaryGrid = staticmethod(_pysgpp.Grid_createLinearTrapezoidBoundaryGrid)
    __swig_getmethods__["createModLinearGrid"] = lambda x: _pysgpp.Grid_createModLinearGrid
    if _newclass:createModLinearGrid = staticmethod(_pysgpp.Grid_createModLinearGrid)
    __swig_getmethods__["unserialize"] = lambda x: _pysgpp.Grid_unserialize
    if _newclass:unserialize = staticmethod(_pysgpp.Grid_unserialize)
    __swig_destroy__ = _pysgpp.delete_Grid
    __del__ = lambda self : None;
    def createGridGenerator(self): return _pysgpp.Grid_createGridGenerator(self)
    def createOperationB(self): return _pysgpp.Grid_createOperationB(self)
    def createOperationEval(self): return _pysgpp.Grid_createOperationEval(self)
    def createOperationTest(self): return _pysgpp.Grid_createOperationTest(self)
    def createOperationIdentity(self): return _pysgpp.Grid_createOperationIdentity(self)
    def createOperationHierarchisation(self): return _pysgpp.Grid_createOperationHierarchisation(self)
    def getStorage(self): return _pysgpp.Grid_getStorage(self)
    def getBoundingBox(self): return _pysgpp.Grid_getBoundingBox(self)
    def getType(self): return _pysgpp.Grid_getType(self)
    def serialize(self): return _pysgpp.Grid_serialize(self)
    def refine(self, *args): return _pysgpp.Grid_refine(self, *args)
    def eval(self, *args): return _pysgpp.Grid_eval(self, *args)
    def insertPoint(self, *args): return _pysgpp.Grid_insertPoint(self, *args)
    def getSize(self): return _pysgpp.Grid_getSize(self)
    def createMemento(self): return _pysgpp.Grid_createMemento(self)
    __swig_getmethods__["setMemento"] = lambda x: _pysgpp.Grid_setMemento
    if _newclass:setMemento = staticmethod(_pysgpp.Grid_setMemento)
Grid_swigregister = _pysgpp.Grid_swigregister
Grid_swigregister(Grid)

def Grid_createLinearGrid(*args):
  return _pysgpp.Grid_createLinearGrid(*args)
Grid_createLinearGrid = _pysgpp.Grid_createLinearGrid

def Grid_createLinearBoundaryGrid(*args):
  return _pysgpp.Grid_createLinearBoundaryGrid(*args)
Grid_createLinearBoundaryGrid = _pysgpp.Grid_createLinearBoundaryGrid

def Grid_createLinearTrapezoidBoundaryGrid(*args):
  return _pysgpp.Grid_createLinearTrapezoidBoundaryGrid(*args)
Grid_createLinearTrapezoidBoundaryGrid = _pysgpp.Grid_createLinearTrapezoidBoundaryGrid

def Grid_createModLinearGrid(*args):
  return _pysgpp.Grid_createModLinearGrid(*args)
Grid_createModLinearGrid = _pysgpp.Grid_createModLinearGrid

def Grid_unserialize(*args):
  return _pysgpp.Grid_unserialize(*args)
Grid_unserialize = _pysgpp.Grid_unserialize

def Grid_setMemento(*args):
  return _pysgpp.Grid_setMemento(*args)
Grid_setMemento = _pysgpp.Grid_setMemento

class GridDataBase(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GridDataBase, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GridDataBase, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pysgpp.new_GridDataBase(*args)
        try: self.this.append(this)
        except: self.this = this
    def toString(self): return _pysgpp.GridDataBase_toString(self)
    def hasKey(self, *args): return _pysgpp.GridDataBase_hasKey(self, *args)
    def set(self, *args): return _pysgpp.GridDataBase_set(self, *args)
    def size(self): return _pysgpp.GridDataBase_size(self)
    def dim(self): return _pysgpp.GridDataBase_dim(self)
    def get(self, *args): return _pysgpp.GridDataBase_get(self, *args)
    def remove(self, *args): return _pysgpp.GridDataBase_remove(self, *args)
    __swig_destroy__ = _pysgpp.delete_GridDataBase
    __del__ = lambda self : None;
GridDataBase_swigregister = _pysgpp.GridDataBase_swigregister
GridDataBase_swigregister(GridDataBase)

class DataVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DataVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DataVector, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pysgpp.new_DataVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def resize(self, *args): return _pysgpp.DataVector_resize(self, *args)
    def resizeZero(self, *args): return _pysgpp.DataVector_resizeZero(self, *args)
    def addSize(self, *args): return _pysgpp.DataVector_addSize(self, *args)
    def append(self, *args): return _pysgpp.DataVector_append(self, *args)
    def setAll(self, *args): return _pysgpp.DataVector_setAll(self, *args)
    def copyFrom(self, *args): return _pysgpp.DataVector_copyFrom(self, *args)
    def assign(self, *args): return _pysgpp.DataVector_assign(self, *args)
    def __getitem__(self, *args): return _pysgpp.DataVector___getitem__(self, *args)
    def __setitem__(self, *args): return _pysgpp.DataVector___setitem__(self, *args)
    def add(self, *args): return _pysgpp.DataVector_add(self, *args)
    def sub(self, *args): return _pysgpp.DataVector_sub(self, *args)
    def componentwise_mult(self, *args): return _pysgpp.DataVector_componentwise_mult(self, *args)
    def componentwise_div(self, *args): return _pysgpp.DataVector_componentwise_div(self, *args)
    def mult(self, *args): return _pysgpp.DataVector_mult(self, *args)
    def sqr(self): return _pysgpp.DataVector_sqr(self)
    def sqrt(self): return _pysgpp.DataVector_sqrt(self)
    def abs(self): return _pysgpp.DataVector_abs(self)
    def sum(self): return _pysgpp.DataVector_sum(self)
    def min(self): return _pysgpp.DataVector_min(self)
    def max(self): return _pysgpp.DataVector_max(self)
    def minmax(self): return _pysgpp.DataVector_minmax(self)
    def maxNorm(self): return _pysgpp.DataVector_maxNorm(self)
    def RMSNorm(self): return _pysgpp.DataVector_RMSNorm(self)
    def l2Norm(self): return _pysgpp.DataVector_l2Norm(self)
    def dotProduct(self, *args): return _pysgpp.DataVector_dotProduct(self, *args)
    def axpy(self, *args): return _pysgpp.DataVector_axpy(self, *args)
    def __len__(self): return _pysgpp.DataVector___len__(self)
    def getUnused(self): return _pysgpp.DataVector_getUnused(self)
    def getInc(self): return _pysgpp.DataVector_getInc(self)
    def setInc(self, *args): return _pysgpp.DataVector_setInc(self, *args)
    def getNumberNonZero(self): return _pysgpp.DataVector_getNumberNonZero(self)
    def partitionClasses(self, *args): return _pysgpp.DataVector_partitionClasses(self, *args)
    def normalize(self, *args): return _pysgpp.DataVector_normalize(self, *args)
    def __str__(self): return _pysgpp.DataVector___str__(self)
    __swig_destroy__ = _pysgpp.delete_DataVector
    __del__ = lambda self : None;
DataVector_swigregister = _pysgpp.DataVector_swigregister
DataVector_swigregister(DataVector)

class DataMatrix(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DataMatrix, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DataMatrix, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pysgpp.new_DataMatrix(*args)
        try: self.this.append(this)
        except: self.this = this
    def resize(self, *args): return _pysgpp.DataMatrix_resize(self, *args)
    def resizeZero(self, *args): return _pysgpp.DataMatrix_resizeZero(self, *args)
    def transpose(self): return _pysgpp.DataMatrix_transpose(self)
    def addSize(self, *args): return _pysgpp.DataMatrix_addSize(self, *args)
    def appendRow(self): return _pysgpp.DataMatrix_appendRow(self)
    def setAll(self, *args): return _pysgpp.DataMatrix_setAll(self, *args)
    def copyFrom(self, *args): return _pysgpp.DataMatrix_copyFrom(self, *args)
    def get(self, *args): return _pysgpp.DataMatrix_get(self, *args)
    def set(self, *args): return _pysgpp.DataMatrix_set(self, *args)
    def getRow(self, *args): return _pysgpp.DataMatrix_getRow(self, *args)
    def setRow(self, *args): return _pysgpp.DataMatrix_setRow(self, *args)
    def getColumn(self, *args): return _pysgpp.DataMatrix_getColumn(self, *args)
    def setColumn(self, *args): return _pysgpp.DataMatrix_setColumn(self, *args)
    def getPointer(self): return _pysgpp.DataMatrix_getPointer(self)
    def add(self, *args): return _pysgpp.DataMatrix_add(self, *args)
    def sub(self, *args): return _pysgpp.DataMatrix_sub(self, *args)
    def componentwise_mult(self, *args): return _pysgpp.DataMatrix_componentwise_mult(self, *args)
    def componentwise_div(self, *args): return _pysgpp.DataMatrix_componentwise_div(self, *args)
    def mult(self, *args): return _pysgpp.DataMatrix_mult(self, *args)
    def sqr(self): return _pysgpp.DataMatrix_sqr(self)
    def sqrt(self): return _pysgpp.DataMatrix_sqrt(self)
    def abs(self): return _pysgpp.DataMatrix_abs(self)
    def sum(self): return _pysgpp.DataMatrix_sum(self)
    def getSize(self): return _pysgpp.DataMatrix_getSize(self)
    def getUnused(self): return _pysgpp.DataMatrix_getUnused(self)
    def getNumberNonZero(self): return _pysgpp.DataMatrix_getNumberNonZero(self)
    def getNrows(self): return _pysgpp.DataMatrix_getNrows(self)
    def getNcols(self): return _pysgpp.DataMatrix_getNcols(self)
    def getInc(self): return _pysgpp.DataMatrix_getInc(self)
    def setInc(self, *args): return _pysgpp.DataMatrix_setInc(self, *args)
    def normalizeDimension(self, *args): return _pysgpp.DataMatrix_normalizeDimension(self, *args)
    def min(self, *args): return _pysgpp.DataMatrix_min(self, *args)
    def max(self, *args): return _pysgpp.DataMatrix_max(self, *args)
    def minmax(self, *args): return _pysgpp.DataMatrix_minmax(self, *args)
    def __str__(self): return _pysgpp.DataMatrix___str__(self)
    __swig_destroy__ = _pysgpp.delete_DataMatrix
    __del__ = lambda self : None;
DataMatrix_swigregister = _pysgpp.DataMatrix_swigregister
DataMatrix_swigregister(DataMatrix)

class DMSystemMatrix(OperationMatrix):
    __swig_setmethods__ = {}
    for _s in [OperationMatrix]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DMSystemMatrix, name, value)
    __swig_getmethods__ = {}
    for _s in [OperationMatrix]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DMSystemMatrix, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pysgpp.new_DMSystemMatrix(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pysgpp.delete_DMSystemMatrix
    __del__ = lambda self : None;
    def mult(self, *args): return _pysgpp.DMSystemMatrix_mult(self, *args)
    def generateb(self, *args): return _pysgpp.DMSystemMatrix_generateb(self, *args)
DMSystemMatrix_swigregister = _pysgpp.DMSystemMatrix_swigregister
DMSystemMatrix_swigregister(DMSystemMatrix)

class GridIndex(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GridIndex, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GridIndex, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pysgpp.new_GridIndex(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pysgpp.delete_GridIndex
    __del__ = lambda self : None;
    def serialize(self, *args): return _pysgpp.GridIndex_serialize(self, *args)
    def dim(self): return _pysgpp.GridIndex_dim(self)
    def set(self, *args): return _pysgpp.GridIndex_set(self, *args)
    def push(self, *args): return _pysgpp.GridIndex_push(self, *args)
    def get(self, *args): return _pysgpp.GridIndex_get(self, *args)
    def setLeaf(self, *args): return _pysgpp.GridIndex_setLeaf(self, *args)
    def isLeaf(self): return _pysgpp.GridIndex_isLeaf(self)
    def abs(self, *args): return _pysgpp.GridIndex_abs(self, *args)
    def getCoordBB(self, *args): return _pysgpp.GridIndex_getCoordBB(self, *args)
    def isInnerPoint(self): return _pysgpp.GridIndex_isInnerPoint(self)
    def getPointer(self): return _pysgpp.GridIndex_getPointer(self)
    def rehash(self): return _pysgpp.GridIndex_rehash(self)
    def hash(self): return _pysgpp.GridIndex_hash(self)
    def equals(self, *args): return _pysgpp.GridIndex_equals(self, *args)
    def assign(self, *args): return _pysgpp.GridIndex_assign(self, *args)
    def toString(self, *args): return _pysgpp.GridIndex_toString(self, *args)
    def getCoords(self, *args): return _pysgpp.GridIndex_getCoords(self, *args)
    def getCoordsBB(self, *args): return _pysgpp.GridIndex_getCoordsBB(self, *args)
    def getCoordsString(self): return _pysgpp.GridIndex_getCoordsString(self)
    def getCoordsStringBB(self, *args): return _pysgpp.GridIndex_getCoordsStringBB(self, *args)
    def getLevelSum(self): return _pysgpp.GridIndex_getLevelSum(self)
    def getLevelMax(self): return _pysgpp.GridIndex_getLevelMax(self)
GridIndex_swigregister = _pysgpp.GridIndex_swigregister
GridIndex_swigregister(GridIndex)

class GridStorage(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GridStorage, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GridStorage, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pysgpp.new_GridStorage(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pysgpp.delete_GridStorage
    __del__ = lambda self : None;
    def emptyStorage(self): return _pysgpp.GridStorage_emptyStorage(self)
    def serialize(self, *args): return _pysgpp.GridStorage_serialize(self, *args)
    def toString(self, *args): return _pysgpp.GridStorage_toString(self, *args)
    def size(self): return _pysgpp.GridStorage_size(self)
    def getNumInnerPoints(self): return _pysgpp.GridStorage_getNumInnerPoints(self)
    def dim(self): return _pysgpp.GridStorage_dim(self)
    def get(self, *args): return _pysgpp.GridStorage_get(self, *args)
    def insert(self, *args): return _pysgpp.GridStorage_insert(self, *args)
    def create(self, *args): return _pysgpp.GridStorage_create(self, *args)
    def destroy(self, *args): return _pysgpp.GridStorage_destroy(self, *args)
    def store(self, *args): return _pysgpp.GridStorage_store(self, *args)
    def find(self, *args): return _pysgpp.GridStorage_find(self, *args)
    def begin(self): return _pysgpp.GridStorage_begin(self)
    def has_key(self, *args): return _pysgpp.GridStorage_has_key(self, *args)
    def left_levelzero(self, *args): return _pysgpp.GridStorage_left_levelzero(self, *args)
    def right_levelzero(self, *args): return _pysgpp.GridStorage_right_levelzero(self, *args)
    def left_child(self, *args): return _pysgpp.GridStorage_left_child(self, *args)
    def right_child(self, *args): return _pysgpp.GridStorage_right_child(self, *args)
    def top(self, *args): return _pysgpp.GridStorage_top(self, *args)
    def seq(self, *args): return _pysgpp.GridStorage_seq(self, *args)
    def end(self, *args): return _pysgpp.GridStorage_end(self, *args)
    def recalcLeafProperty(self): return _pysgpp.GridStorage_recalcLeafProperty(self)
    def getBoundingBox(self): return _pysgpp.GridStorage_getBoundingBox(self)
    def setBoundingBox(self, *args): return _pysgpp.GridStorage_setBoundingBox(self, *args)
GridStorage_swigregister = _pysgpp.GridStorage_swigregister
GridStorage_swigregister(GridStorage)

class SLinearBase(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SLinearBase, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SLinearBase, name)
    __repr__ = _swig_repr
    def eval(self, *args): return _pysgpp.SLinearBase_eval(self, *args)
    def __init__(self): 
        this = _pysgpp.new_SLinearBase()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pysgpp.delete_SLinearBase
    __del__ = lambda self : None;
SLinearBase_swigregister = _pysgpp.SLinearBase_swigregister
SLinearBase_swigregister(SLinearBase)

class SLinearBoundaryBase(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SLinearBoundaryBase, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SLinearBoundaryBase, name)
    __repr__ = _swig_repr
    def eval(self, *args): return _pysgpp.SLinearBoundaryBase_eval(self, *args)
    def __init__(self): 
        this = _pysgpp.new_SLinearBoundaryBase()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pysgpp.delete_SLinearBoundaryBase
    __del__ = lambda self : None;
SLinearBoundaryBase_swigregister = _pysgpp.SLinearBoundaryBase_swigregister
SLinearBoundaryBase_swigregister(SLinearBoundaryBase)

class SModLinearBase(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SModLinearBase, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SModLinearBase, name)
    __repr__ = _swig_repr
    def eval(self, *args): return _pysgpp.SModLinearBase_eval(self, *args)
    def __init__(self): 
        this = _pysgpp.new_SModLinearBase()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pysgpp.delete_SModLinearBase
    __del__ = lambda self : None;
SModLinearBase_swigregister = _pysgpp.SModLinearBase_swigregister
SModLinearBase_swigregister(SModLinearBase)

class SGetAffectedBasisFunctions(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SGetAffectedBasisFunctions, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SGetAffectedBasisFunctions, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pysgpp.new_SGetAffectedBasisFunctions(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pysgpp.delete_SGetAffectedBasisFunctions
    __del__ = lambda self : None;
    def __call__(self, *args): return _pysgpp.SGetAffectedBasisFunctions___call__(self, *args)
SGetAffectedBasisFunctions_swigregister = _pysgpp.SGetAffectedBasisFunctions_swigregister
SGetAffectedBasisFunctions_swigregister(SGetAffectedBasisFunctions)

class SGetAffectedBasisFunctionsBoundaries(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SGetAffectedBasisFunctionsBoundaries, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SGetAffectedBasisFunctionsBoundaries, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pysgpp.new_SGetAffectedBasisFunctionsBoundaries(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pysgpp.delete_SGetAffectedBasisFunctionsBoundaries
    __del__ = lambda self : None;
    def __call__(self, *args): return _pysgpp.SGetAffectedBasisFunctionsBoundaries___call__(self, *args)
SGetAffectedBasisFunctionsBoundaries_swigregister = _pysgpp.SGetAffectedBasisFunctionsBoundaries_swigregister
SGetAffectedBasisFunctionsBoundaries_swigregister(SGetAffectedBasisFunctionsBoundaries)

# This file is compatible with both classic and new-style classes.


